var document = require("document");
var device = require("device");
var utils = require("app/entities/utils");

var _= require("modules/underscore/underscore.js")._;

var log = require("log");
log.setLevel("INFO");

var event_prefix = "device_event_";
var type = "hardware";


function getLatestDeviceEntry(id) {
   var key = event_prefix + id;;
  
   var params = {
       "query" : "key like \""+key+"_%\"",
       "fields": "*",
       "sort": "creationDate<date:DESC>",
       "resultsPerPage": 1
   }

   var result = document.query(params);
   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result.documents[0];
   } else {
        return null;
   }
}

function getDeviceAlertsEntries(id) {
   var key = event_prefix + id;;
   var params = {
       "query" : "key like \""+key+"_%\" and event_type in [\"alert\"]",
       "fields": "*",
       "sort": "creationDate<date:DESC>"
        
   }
   
   var result = document.query(params);
   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result.documents;
   } else {
        return null;
   }
}


function buildDeviceEventDocument(entry, data) {
    _.extendOwn(entry, data);
    delete entry.auth_token;
    delete entry.versionNumber;
    delete entry.latest;
    delete entry.creator;
    delete entry["apsdb.update"];

    entry["event_type"] = ["event"];
    entry["key"] = event_prefix + entry.id + "_" + new Date().getTime();
 	entry["meta.types"] = {
        "temperature": "numeric",
        "humidity": "numeric",
        "pressure": "numeric"
   	}
    return entry;
}

function saveDeviceEvent(entry) {
   log.info("[app/entities/devicemanager] saving device event."+JSON.stringify(entry))
    log.info("[app/entities/devicemanager] saving device event."+JSON.stringify(document.save(entry)))
  // return ;
}


function buildDeviceDefinitionDocument(entry) {
    entry["id"] = entry.id;
    entry["password"] = utils.generate();
    entry["type"] = type;
    return entry;
}

function saveDeviceDefinition(entry) {
   return device.save(entry);
}

function getDeviceDefinition(id) {
    var params = {
       "query" : "id =\""+ id +"\"",
       "fields": "country,city,source,locationType,locationSection,physicalEnvironment,sensor,address,long,lat,event_type,id"
   }
   var result = device.query(params);
   if(result.metadata.status == "success") {
        return result.result.devices[0];
   } else {
        return null;
   }
}


function getAllDevicesDefinition() {

   var params = {
       "query" : "type =\""+ type +"\"",
       "fields": "*"
   }
   
   var result = device.query(params);
   if(result.metadata.status == "success" && result.result.devices.length > 0) {
        return result.result.devices;
   } else {
        return null;
   }
}

function getDevicesHistoricalSensorsEntries(devices, sensors) {
   var prefix = "key like \""+ event_prefix ;
   var suffix = "_%\" or ";
   var lastSuffix =   "_%\"";
   var query = "";
  _.forEach(devices, function(device, index, list){
         query += prefix + device + ((index == list.length - 1) ? lastSuffix : suffix);
  });
   var params = {
       "query" : query,
       "fields": ((Array.isArray(sensors)) ? sensors.join(",") : sensors),
       "sort": "creationDate<date:ASC>",
       "count": "true"
   }
   log.info("Query Params: "+ JSON.stringify(params));
   var result = document.query(params);
   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result;
   } else {
        return null;
   }
}


/**
 * @function listHistory
 * @param {String} id: the device's id
 * @return {ArrayList} list of historical device data
 */
/**function getDeviceHistoricalEntries(id) {
   var key = event_prefix + id;;
   
   var params = {
       "query" : "key like \""+key+"_%\"",
       "fields": "*"
   }
   
   var result = document.query(params);
   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result.documents;
   } else {
        return null;
   }
} **/

function getDeviceHistoricalEntries(id, recordCount, startTime, endTime, descSorting) {
  var key = event_prefix + id;

  var query = "key like \""+key+"_%\"";

  if(startTime) {
    query += " AND creationDate<numeric> >= "+startTime;
  }

  if(endTime) {
    query += " AND creationDate<numeric> <= "+endTime+" ";
  }

  var maxAllowedResultsPerPage = 50;
  var params = {
    "query" : query,
    "fields": "*",
    "count": true,
    "sort": descSorting ? "creationDate<date:DESC>" : "creationDate<date:ASC>",
    "resultsPerPage": maxAllowedResultsPerPage //Maximum allowed number of results [50]
  }
  log.info("[app/entities/deviceManager] params\n"+JSON.stringify(params));
  var pageCounter = 1;
  var continueLoop = true;

  var documents = [];

  while(continueLoop){
    params["pageNumber"] = pageCounter;

    if(recordCount && recordCount < maxAllowedResultsPerPage){
      params["resultsPerPage"] = recordCount;
    } 

    if(recordCount && documents.length >= recordCount) {
      continueLoop = false;
      continue;
    }

    if(documents.length < recordCount && recordCount < documents.length + params["resultsPerPage"]) {
      params["resultsPerPage"] = recordCount - documents.length;
    }

    var result = document.query(params);
    log.info("[app/entities/deviceManager] result\n"+JSON.stringify(result));

    if(result.metadata.status == "success") {
      if(result.result && result.result.documents && result.result.documents.length == 0) {
        continueLoop = false;
        continue;
      }
      pageCounter++;
      documents = _.union(documents, result.result.documents);

    } else {
      continueLoop = false;
      continue;
    }
  }

  return documents;

}


function getAllDeviceLatestPayload(id) {
  var key = event_prefix + id;
  var params = {
    "query" : "key like \""+key+"_%\"",
    "fields": "creationDate",
    "sort": "creationDate<date:DESC>",
    "resultsPerPage": 1
  }

  var result = document.query(params);
  if(result.metadata.status == "success" && result.result.documents.length > 0) {
    return result.result.documents[0];
  } else {
    return null;
  }
}
